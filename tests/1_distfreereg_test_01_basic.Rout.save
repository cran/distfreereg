
R version 4.4.2 (2024-10-31 ucrt) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(distfreereg)
> set.seed(20240303)
> n <- 1e2
> func <- function(x, theta) theta[1] + theta[2]*x
> Sig <- diag(rexp(n))
> theta <- c(2,5)
> X <- matrix(rexp(n, rate = 1))
> Y <- distfreereg:::f2ftheta(f = func, X)(theta) +
+   as.vector(distfreereg:::rmvnorm(n = n, reps = 1, mean = rep(0,n), SqrtSigma = distfreereg:::matsqrt(Sig)))
> set.seed(20240303)
> dfr_1 <- distfreereg(Y = Y, X = X, test_mean = func, covariance = list(Sigma = Sig), theta_init = c(1,1), verbose = FALSE)
> dfr_2 <- distfreereg(Y = Y, X = X, test_mean = func, covariance = list(P = solve(Sig)), theta_init = c(1,1), verbose = FALSE)
> dfr_1

Number of observations: 100 
Monte Carlo simulations: 10000 

Estimated parameter values:
   theta1     theta2 
2.079e+00  4.939e+00 

Observed statistics:
Stat      Value  Pr(>Value)       MCSE 
  KS  7.292e-01   5.690e-01  4.952e-03 
 CvM  1.551e-01   3.753e-01  4.842e-03 
---
`MCSE' is the Monte Carlo standard error of the estimated p-value.

> dfr_2

Number of observations: 100 
Monte Carlo simulations: 10000 

Estimated parameter values:
   theta1     theta2 
2.079e+00  4.939e+00 

Observed statistics:
Stat      Value  Pr(>Value)       MCSE 
  KS  7.292e-01   5.619e-01  4.962e-03 
 CvM  1.551e-01   3.730e-01  4.836e-03 
---
`MCSE' is the Monte Carlo standard error of the estimated p-value.

> 
> message('all.equal(dfr_1[["epsp"]], dfr_2[["epsp"]], tolerance = 1e-5) (should be TRUE): ', all.equal(dfr_1[["epsp"]], dfr_2[["epsp"]], tolerance = 1e-5))
all.equal(dfr_1[["epsp"]], dfr_2[["epsp"]], tolerance = 1e-5) (should be TRUE): TRUE
> 
> # Verify that r and mu are orthogonal.
> message('all.equal(crossprod(dfr_1[["r"]]), diag(length(dfr_1[["theta_hat"]])), tolerance = 1e-5) (should be TRUE): ', all.equal(crossprod(dfr_1[["r"]]), diag(length(dfr_1[["theta_hat"]])), tolerance = 1e-5))
all.equal(crossprod(dfr_1[["r"]]), diag(length(dfr_1[["theta_hat"]])), tolerance = 1e-5) (should be TRUE): TRUE
> message('all.equal(crossprod(dfr_1[["mu"]]), diag(length(dfr_1[["theta_hat"]])), tolerance = 1e-5) (should be TRUE): ', all.equal(crossprod(dfr_1[["mu"]]), diag(length(dfr_1[["theta_hat"]])), tolerance = 1e-5))
all.equal(crossprod(dfr_1[["mu"]]), diag(length(dfr_1[["theta_hat"]])), tolerance = 1e-5) (should be TRUE): TRUE
> 
> signif(fitted(dfr_1), digits = 5)
  [1]  2.9400 10.2370  2.2043  2.7653  2.5056 15.1970  4.4870  3.5613  6.8521
 [10]  4.0891  5.4007  3.1597  5.9700  8.1822  7.3025 12.5340  4.3560  3.7877
 [19] 16.6570  4.7455  8.3165  2.7798  5.6968 13.7180 13.8010  4.5480  2.5686
 [28]  3.9748  8.6274  4.2514  2.8841  4.7762 29.2030  4.5659  4.2286  4.8909
 [37] 17.8970  4.1546  6.5485 14.4730  2.1510  2.6051  7.2732  7.9859  4.3169
 [46] 14.1540  3.7022 10.4970 15.8070 15.8300  6.3278  3.4425  4.4277  7.0814
 [55]  8.3835  4.7931  2.6025  6.1201  3.6918  4.3950  2.8768  3.7325  5.1912
 [64] 13.3260  3.2093  6.1327  3.7827  2.2677  5.1238 18.4320  9.6685  3.6514
 [73]  7.0589  2.7486 12.9980  2.9416  2.7156  4.4545 21.3040  5.2580  3.0419
 [82] 14.3800 11.6370  6.9335  5.6983 10.7530  3.0143  2.9188  3.2379  2.6858
 [91]  2.2279  2.1077  2.8773  2.9009 10.6190  6.0957  9.4521  6.3465  7.3860
[100]  4.9439
> 
> message('all.equal(residuals(dfr_1), residuals(dfr_1, type = "raw"), tolerance = 1e-5) (should be TRUE): ', all.equal(residuals(dfr_1), residuals(dfr_1, type = "raw"), tolerance = 1e-5))
all.equal(residuals(dfr_1), residuals(dfr_1, type = "raw"), tolerance = 1e-5) (should be TRUE): TRUE
> signif(residuals(dfr_1, type = "sphered"), digits = 5)
  [1] -0.417250  1.081300 -0.385160 -0.972160  1.791600 -0.545460  1.421000
  [8]  1.435800 -0.843550 -0.096095  1.194100 -1.123500 -0.059356 -0.552740
 [15] -0.459880  0.615970 -0.305090 -0.914910 -0.244990 -1.826000 -1.354000
 [22] -0.231700  0.423710 -0.494410 -1.155400  0.652630 -0.146550  0.068724
 [29] -0.471790  0.971270  0.410570  0.883700  0.372490  0.703450  0.361110
 [36]  1.505200  0.647590  0.276930  0.609540 -1.426600 -0.894250 -0.944840
 [43] -0.630900  0.105520  0.148340  0.125590  0.874910  0.078562  0.428360
 [50]  0.789910 -1.556000  1.260100  0.461200  0.137780  1.574500 -0.144060
 [57] -1.538200  0.445070 -1.987100  0.704320 -0.524310 -0.224620 -0.138750
 [64] -0.934130  0.326820  1.001000 -0.168330  1.216900 -0.407470  2.372100
 [71] -0.264810  0.050445  0.161290 -1.456100 -1.191600  0.978150  0.335060
 [78] -0.067528  0.279130  0.849830 -0.193880  0.929030 -0.184330 -0.343860
 [85] -0.594750 -0.596770 -0.840650  0.129950  1.294100 -1.150900  2.003800
 [92] -0.264690 -0.452410 -0.268500  0.837520 -0.795150  0.644910  0.043774
 [99] -0.140780  0.460270
> signif(residuals(dfr_1, type = "transformed"), digits = 5)
  [1] -0.651370  1.103400 -0.265320 -1.203900  1.570800 -0.226990  1.427300
  [8]  1.322400 -0.852300 -0.361950  1.003900 -1.274900  0.084298 -0.460770
 [15] -0.541390  0.475340 -0.302520 -1.158700 -0.158480 -1.687100 -1.459800
 [22] -0.499150  0.234040 -0.258890 -1.103300  0.397900 -0.312720  0.183660
 [29] -0.582610  0.879940  0.360790  0.733420  1.259400  0.763590  0.394230
 [36]  1.603600  0.779600  0.266030  0.647820 -1.336700 -0.840230 -1.081100
 [43] -0.680950 -0.036717  0.264050  0.269570  0.868250  0.229850  0.715240
 [50]  0.786710 -1.550500  1.003600  0.311010  0.047142  1.436200 -0.039625
 [57] -1.573100  0.249020 -1.973300  0.426750 -0.658080 -0.373470 -0.218010
 [64] -1.090200  0.308190  1.109500 -0.474230  1.041500 -0.517750  2.424100
 [71] -0.130050 -0.231830  0.147410 -1.384700 -1.028100  0.831550  0.270950
 [78] -0.366190  0.444760  0.988290 -0.328310  0.762420 -0.345590 -0.521290
 [85] -0.506280 -0.656730 -0.984200  0.140040  1.294100 -1.216000  1.762100
 [92] -0.303530 -0.353880 -0.339380  0.837150 -0.717130  0.675890 -0.090673
 [99] -0.295670  0.468840
> 
> 
> 
> # Compare results of different methods; should all be equivalent.
> 
> set.seed(20240303)
> dfr_3 <- distfreereg(Y = Y, X = X, test_mean = NULL, covariance = list(Sigma = Sig),
+                      verbose = FALSE, J = dfr_1[["J"]],
+                      fitted_values = dfr_1[["fitted_values"]])
> 
> 
> data <- data.frame(a = X, b = Y)
> 
> set.seed(20240303)
> dfr_4 <- distfreereg(test_mean = b ~ a, data = data, covariance = list(Sigma = Sig),
+                      verbose = FALSE, override = list(res_order = dfr_1[["res_order"]]))
> 
> m <- lm(b ~ a, data = data, weights = 1/diag(Sig))
> 
> set.seed(20240303)
> dfr_5 <- distfreereg(test_mean = m, verbose = FALSE,
+                      override = list(res_order = dfr_1[["res_order"]]))
> 
> set.seed(20240303)
> form <- b ~ d + e*a
> dfr_6 <- distfreereg(test_mean = form, data = data, covariance = list(Sigma = Sig),
+                      method = "nls", verbose = FALSE,
+                      override = list(res_order = dfr_1[["res_order"]]))
Warning message:
In (function (formula, data = parent.frame(), start, control = nls.control(),  :
  No starting values specified for some parameters.
Initializing 'd', 'e' to '1.'.
Consider specifying 'start' or using a selfStart model
> 
> message('identical(dfr_1[["epsp"]], dfr_3[["epsp"]]) (should be TRUE): ', identical(dfr_1[["epsp"]], dfr_3[["epsp"]]))
identical(dfr_1[["epsp"]], dfr_3[["epsp"]]) (should be TRUE): TRUE
> message('all.equal(dfr_1[["theta_hat"]], dfr_4[["theta_hat"]], check.attributes = FALSE, tolerance = 1e-5) (should be TRUE): ', all.equal(dfr_1[["theta_hat"]], dfr_4[["theta_hat"]], check.attributes = FALSE, tolerance = 1e-5))
all.equal(dfr_1[["theta_hat"]], dfr_4[["theta_hat"]], check.attributes = FALSE, tolerance = 1e-5) (should be TRUE): TRUE
> message('all.equal(dfr_1[["epsp"]], dfr_4[["epsp"]], check.attributes = FALSE, tolerance = 1e-5) (should be TRUE): ', all.equal(dfr_1[["epsp"]], dfr_4[["epsp"]], check.attributes = FALSE, tolerance = 1e-5))
all.equal(dfr_1[["epsp"]], dfr_4[["epsp"]], check.attributes = FALSE, tolerance = 1e-5) (should be TRUE): TRUE
> message('all.equal(dfr_1[["epsp"]], dfr_5[["epsp"]], check.attributes = FALSE, tolerance = 1e-5) (should be TRUE): ', all.equal(dfr_1[["epsp"]], dfr_5[["epsp"]], check.attributes = FALSE, tolerance = 1e-5))
all.equal(dfr_1[["epsp"]], dfr_5[["epsp"]], check.attributes = FALSE, tolerance = 1e-5) (should be TRUE): TRUE
> message('all.equal(dfr_1[["epsp"]], dfr_6[["epsp"]], tolerance = 1e-5) (should be TRUE): ', all.equal(dfr_1[["epsp"]], dfr_6[["epsp"]], tolerance = 1e-5))
all.equal(dfr_1[["epsp"]], dfr_6[["epsp"]], tolerance = 1e-5) (should be TRUE): TRUE
> message('identical(dfr_1[["observed_stats"]], dfr_3[["observed_stats"]]) (should be TRUE): ', identical(dfr_1[["observed_stats"]], dfr_3[["observed_stats"]]))
identical(dfr_1[["observed_stats"]], dfr_3[["observed_stats"]]) (should be TRUE): TRUE
> all.equal(dfr_1[["observed_stats"]], dfr_4[["observed_stats"]],
+           check.attributes = FALSE, tolerance = 1e-5)# TRUE, or small relative difference
[1] TRUE
> all.equal(dfr_1[["observed_stats"]], dfr_5[["observed_stats"]],
+           check.attributes = FALSE, tolerance = 1e-5)# TRUE, or small relative difference
[1] TRUE
> message('all.equal(dfr_1[["observed_stats"]], dfr_6[["observed_stats"]], tolerance = 1e-5) (should be TRUE): ', all.equal(dfr_1[["observed_stats"]], dfr_6[["observed_stats"]], tolerance = 1e-5))
all.equal(dfr_1[["observed_stats"]], dfr_6[["observed_stats"]], tolerance = 1e-5) (should be TRUE): TRUE
> message('identical(dfr_1[["mcsim_stats"]], dfr_3[["mcsim_stats"]]) (should be TRUE): ', identical(dfr_1[["mcsim_stats"]], dfr_3[["mcsim_stats"]]))
identical(dfr_1[["mcsim_stats"]], dfr_3[["mcsim_stats"]]) (should be TRUE): TRUE
> message('identical(dfr_1[["mcsim_stats"]], dfr_4[["mcsim_stats"]]) (should be TRUE): ', identical(dfr_1[["mcsim_stats"]], dfr_4[["mcsim_stats"]]))
identical(dfr_1[["mcsim_stats"]], dfr_4[["mcsim_stats"]]) (should be TRUE): TRUE
> message('identical(dfr_1[["mcsim_stats"]], dfr_5[["mcsim_stats"]]) (should be TRUE): ', identical(dfr_1[["mcsim_stats"]], dfr_5[["mcsim_stats"]]))
identical(dfr_1[["mcsim_stats"]], dfr_5[["mcsim_stats"]]) (should be TRUE): TRUE
> message('identical(dfr_1[["mcsim_stats"]], dfr_6[["mcsim_stats"]]) (should be TRUE): ', identical(dfr_1[["mcsim_stats"]], dfr_6[["mcsim_stats"]]))
identical(dfr_1[["mcsim_stats"]], dfr_6[["mcsim_stats"]]) (should be TRUE): TRUE
> message('identical(dfr_1[["p"]], dfr_3[["p"]]) (should be TRUE): ', identical(dfr_1[["p"]], dfr_3[["p"]]))
identical(dfr_1[["p"]], dfr_3[["p"]]) (should be TRUE): TRUE
> message('identical(dfr_1[["p"]], dfr_4[["p"]]) (should be TRUE): ', identical(dfr_1[["p"]], dfr_4[["p"]]))
identical(dfr_1[["p"]], dfr_4[["p"]]) (should be TRUE): TRUE
> message('identical(dfr_1[["p"]], dfr_5[["p"]]) (should be TRUE): ', identical(dfr_1[["p"]], dfr_5[["p"]]))
identical(dfr_1[["p"]], dfr_5[["p"]]) (should be TRUE): TRUE
> message('identical(dfr_1[["p"]], dfr_6[["p"]]) (should be TRUE): ', identical(dfr_1[["p"]], dfr_6[["p"]]))
identical(dfr_1[["p"]], dfr_6[["p"]]) (should be TRUE): TRUE
> 
> 
> m_nls <- nls(form, data = data, weights = 1/diag(Sig))
Warning message:
In nls(form, data = data, weights = 1/diag(Sig)) :
  No starting values specified for some parameters.
Initializing 'd', 'e' to '1.'.
Consider specifying 'start' or using a selfStart model
> set.seed(20240303)
> dfr_7 <- distfreereg(test_mean = m_nls,
+                      override = list(res_order = dfr_1[["res_order"]]))
Using weights from nls object as covariance specification...
Retrieving Jacobian from 'nls' object...
Retrieving fitted values from 'nls' object...
Using supplied inverse square root of the covariance matrix...
Calculating mu...
Using supplied observation ordering...
Calculating transformation anchors...
Calculating residuals...
Calculating observed statistic(s)...
Running Monte Carlo simulation...
...1000 of 10000
...2000 of 10000
...3000 of 10000
...4000 of 10000
...5000 of 10000
...6000 of 10000
...7000 of 10000
...8000 of 10000
...9000 of 10000
...10000 of 10000
> message('identical(dfr_6[["epsp"]], dfr_7[["epsp"]]) (should be TRUE): ', identical(dfr_6[["epsp"]], dfr_7[["epsp"]]))
identical(dfr_6[["epsp"]], dfr_7[["epsp"]]) (should be TRUE): TRUE
> message('identical(dfr_6[["observed_stats"]], dfr_7[["observed_stats"]]) (should be TRUE): ', identical(dfr_6[["observed_stats"]], dfr_7[["observed_stats"]]))
identical(dfr_6[["observed_stats"]], dfr_7[["observed_stats"]]) (should be TRUE): TRUE
> message('identical(dfr_6[["mcsim_stats"]], dfr_7[["mcsim_stats"]]) (should be TRUE): ', identical(dfr_6[["mcsim_stats"]], dfr_7[["mcsim_stats"]]))
identical(dfr_6[["mcsim_stats"]], dfr_7[["mcsim_stats"]]) (should be TRUE): TRUE
> message('identical(dfr_6[["p"]], dfr_7[["p"]]) (should be TRUE): ', identical(dfr_6[["p"]], dfr_7[["p"]]))
identical(dfr_6[["p"]], dfr_7[["p"]]) (should be TRUE): TRUE
> 
> proc.time()
   user  system elapsed 
   2.87    0.09    2.95 

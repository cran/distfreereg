
R version 4.4.2 (2024-10-31 ucrt) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(distfreereg)
> set.seed(20240304)
> n <- 1e2
> 
> func <- function(x, theta) sum(theta*x)
> Sig <- diag(rexp(n))
> theta <- c(2,5)
> X <- cbind(`(Intercept)` = 1, matrix(rexp(n, rate = 1)))
> Y <- distfreereg:::f2ftheta(f = func, X)(theta) +
+   as.vector(distfreereg:::rmvnorm(n = n, reps = 1, mean = rep(0,n), SqrtSigma = distfreereg:::matsqrt(Sig)))
> set.seed(20240303)
> dfr_1a <- distfreereg(Y = Y, X = X, test_mean = func, covariance = list(Sigma = Sig),
+                       theta_init = c(1,1), verbose = FALSE)
> 
> set.seed(20240303)
> dfr_2a <- distfreereg(Y = Y, X = X, test_mean = NULL, covariance = list(Sigma = Sig),
+                       verbose = FALSE, J = dfr_1a[["J"]],
+                       fitted_values = dfr_1a[["fitted_values"]])
> 
> data <- data.frame(a = X[,1], b = X[,2], c = Y)
> set.seed(20240303)
> dfr_3a <- distfreereg(test_mean = c ~ a + b - 1, data = data, covariance = list(Sigma = Sig),
+                       verbose = FALSE,
+                       override = list(res_order = dfr_1a[["res_order"]]))
Warning message:
In validate_args_distfreereg_default(Y = Y, X = X, covariance = covariance,  :
  At least one column of X contains only one value. Verify that the model is identifiable.
> 
> 
> 
> dfr_1b <- update(dfr_1a, control = list(symmetric = FALSE))
> dfr_2b <- update(dfr_2a, control = list(symmetric = FALSE))
> dfr_3b <- update(dfr_3a, control = list(symmetric = FALSE))
Warning message:
In validate_args_distfreereg_default(Y = Y, X = X, covariance = covariance,  :
  At least one column of X contains only one value. Verify that the model is identifiable.
> 
> message('identical(dfr_1a[["observed_stats"]], dfr_1b[["observed_stats"]]) (should be TRUE): ', identical(dfr_1a[["observed_stats"]], dfr_1b[["observed_stats"]]))
identical(dfr_1a[["observed_stats"]], dfr_1b[["observed_stats"]]) (should be TRUE): TRUE
> message('identical(dfr_1a[["observed_stats"]], dfr_2a[["observed_stats"]]) (should be TRUE): ', identical(dfr_1a[["observed_stats"]], dfr_2a[["observed_stats"]]))
identical(dfr_1a[["observed_stats"]], dfr_2a[["observed_stats"]]) (should be TRUE): TRUE
> message('identical(dfr_1a[["observed_stats"]], dfr_2b[["observed_stats"]]) (should be TRUE): ', identical(dfr_1a[["observed_stats"]], dfr_2b[["observed_stats"]]))
identical(dfr_1a[["observed_stats"]], dfr_2b[["observed_stats"]]) (should be TRUE): TRUE
> all.equal(dfr_1a[["observed_stats"]], dfr_3b[["observed_stats"]], tolerance = 1e-5)# nearly equal
[1] TRUE
> message('identical(dfr_1a[["mcsim_stats"]], dfr_1b[["mcsim_stats"]]) (should be TRUE): ', identical(dfr_1a[["mcsim_stats"]], dfr_1b[["mcsim_stats"]]))
identical(dfr_1a[["mcsim_stats"]], dfr_1b[["mcsim_stats"]]) (should be TRUE): TRUE
> message('identical(dfr_1a[["mcsim_stats"]], dfr_2a[["mcsim_stats"]]) (should be TRUE): ', identical(dfr_1a[["mcsim_stats"]], dfr_2a[["mcsim_stats"]]))
identical(dfr_1a[["mcsim_stats"]], dfr_2a[["mcsim_stats"]]) (should be TRUE): TRUE
> message('identical(dfr_1a[["mcsim_stats"]], dfr_2b[["mcsim_stats"]]) (should be TRUE): ', identical(dfr_1a[["mcsim_stats"]], dfr_2b[["mcsim_stats"]]))
identical(dfr_1a[["mcsim_stats"]], dfr_2b[["mcsim_stats"]]) (should be TRUE): TRUE
> message('identical(dfr_1a[["mcsim_stats"]], dfr_3b[["mcsim_stats"]]) (should be TRUE): ', identical(dfr_1a[["mcsim_stats"]], dfr_3b[["mcsim_stats"]]))
identical(dfr_1a[["mcsim_stats"]], dfr_3b[["mcsim_stats"]]) (should be TRUE): TRUE
> 
> set.seed(20240303)
> dfr_1c <- update(dfr_1a, override = list(res_order = 1:n))
> set.seed(20240303)
> dfr_2c <- update(dfr_2a, override = list(res_order = 1:n))
> set.seed(20240303)
> dfr_3c <- update(dfr_3a, override = list(res_order = 1:n))
Warning message:
In validate_args_distfreereg_default(Y = Y, X = X, covariance = covariance,  :
  At least one column of X contains only one value. Verify that the model is identifiable.
> 
> message('identical(dfr_1c[["observed_stats"]], dfr_2c[["observed_stats"]]) (should be TRUE): ', identical(dfr_1c[["observed_stats"]], dfr_2c[["observed_stats"]]))
identical(dfr_1c[["observed_stats"]], dfr_2c[["observed_stats"]]) (should be TRUE): TRUE
> all.equal(dfr_1c[["observed_stats"]], dfr_3c[["observed_stats"]], tolerance = 1e-5)# nearly equal
[1] TRUE
> message('identical(dfr_1c[["mcsim_stats"]], dfr_2c[["mcsim_stats"]]) (should be TRUE): ', identical(dfr_1c[["mcsim_stats"]], dfr_2c[["mcsim_stats"]]))
identical(dfr_1c[["mcsim_stats"]], dfr_2c[["mcsim_stats"]]) (should be TRUE): TRUE
> message('identical(dfr_1c[["mcsim_stats"]], dfr_3c[["mcsim_stats"]]) (should be TRUE): ', identical(dfr_1c[["mcsim_stats"]], dfr_3c[["mcsim_stats"]]))
identical(dfr_1c[["mcsim_stats"]], dfr_3c[["mcsim_stats"]]) (should be TRUE): TRUE
> 
> Y_new <- distfreereg:::f2ftheta(f = func, X)(theta) +
+   as.vector(distfreereg:::rmvnorm(n = n, reps = 1, mean = rep(0,n), SqrtSigma = distfreereg:::matsqrt(Sig)))
> 
> set.seed(20240303)
> dfr_1d <- update(dfr_1a, Y = Y_new)
> set.seed(20240303)
> dfr_2d <- update(dfr_2a, Y = Y_new, J = dfr_1d[["J"]],
+                  fitted_values = dfr_1d[["fitted_values"]])
> set.seed(20240303)
> dfr_3d <- update(dfr_3a, data = data.frame(c = Y_new, a = X[,1], b = X[,2]))
Warning message:
In validate_args_distfreereg_default(Y = Y, X = X, covariance = covariance,  :
  At least one column of X contains only one value. Verify that the model is identifiable.
> 
> message('identical(dfr_1d[["observed_stats"]], dfr_2d[["observed_stats"]]) (should be TRUE): ', identical(dfr_1d[["observed_stats"]], dfr_2d[["observed_stats"]]))
identical(dfr_1d[["observed_stats"]], dfr_2d[["observed_stats"]]) (should be TRUE): TRUE
> message('all.equal(dfr_1d[["theta_hat"]], dfr_3d[["theta_hat"]], check.attributes = FALSE, tolerance = 1e-5) (should be TRUE): ', all.equal(dfr_1d[["theta_hat"]], dfr_3d[["theta_hat"]], check.attributes = FALSE, tolerance = 1e-5))
all.equal(dfr_1d[["theta_hat"]], dfr_3d[["theta_hat"]], check.attributes = FALSE, tolerance = 1e-5) (should be TRUE): TRUE
> message('identical(dfr_1d[["mcsim_stats"]], dfr_2d[["mcsim_stats"]]) (should be TRUE): ', identical(dfr_1d[["mcsim_stats"]], dfr_2d[["mcsim_stats"]]))
identical(dfr_1d[["mcsim_stats"]], dfr_2d[["mcsim_stats"]]) (should be TRUE): TRUE
> message('identical(dfr_1d[["mcsim_stats"]], dfr_3d[["mcsim_stats"]]) (should be TRUE): ', identical(dfr_1d[["mcsim_stats"]], dfr_3d[["mcsim_stats"]]))
identical(dfr_1d[["mcsim_stats"]], dfr_3d[["mcsim_stats"]]) (should be TRUE): TRUE
> 
> proc.time()
   user  system elapsed 
   2.42    0.18    2.54 


R version 4.4.2 (2024-10-31 ucrt) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(distfreereg)
> set.seed(20240206)
> n <- 1e2
> func <- function(x, theta) theta[1] + theta[2]*x[1] + theta[3]*x[2]
> Sig <- rWishart(1, df = n, Sigma = diag(n))[,,1]
> theta <- c(2,5,1)
> X <- matrix(rexp(2*n, rate = 1), nrow = n)
> Y <- distfreereg:::f2ftheta(f = func, X = X)(theta) +
+   as.vector(distfreereg:::rmvnorm(n = n, reps = 1, mean = rep(0,n), SqrtSigma = distfreereg:::matsqrt(Sig)))
> 
> # The following three distfreereg objects should have identical simulated
> # results.
> set.seed(20240206)
> dfr_1 <- distfreereg(Y = Y, X = X, test_mean = func, covariance = list(Sigma = Sig), theta_init = c(1,1,1),
+                      verbose = FALSE, B = 10)
> set.seed(20240206)
> dfr_2 <- distfreereg(Y = Y, X = X, test_mean = func, covariance = list(Sigma = Sig), theta_init = c(1,1,1),
+                      verbose = FALSE, B = 10.5)
> set.seed(20240206)
> dfr_3 <- distfreereg(Y = Y, X = X, test_mean = func, covariance = list(Sigma = Sig), theta_init = c(1,1,1),
+                      verbose = FALSE, B = 10.6)
> 
> message('identical(dfr_1[["mcsim_stats"]], dfr_2[["mcsim_stats"]]) (should be TRUE): ', identical(dfr_1[["mcsim_stats"]], dfr_2[["mcsim_stats"]]))
identical(dfr_1[["mcsim_stats"]], dfr_2[["mcsim_stats"]]) (should be TRUE): TRUE
> message('identical(dfr_1[["mcsim_stats"]], dfr_3[["mcsim_stats"]]) (should be TRUE): ', identical(dfr_1[["mcsim_stats"]], dfr_3[["mcsim_stats"]]))
identical(dfr_1[["mcsim_stats"]], dfr_3[["mcsim_stats"]]) (should be TRUE): TRUE
> 
> 
> # Verify that the code works for B = 1.
> distfreereg(Y = Y, X = X, test_mean = func, covariance = list(Sigma = Sig), theta_init = c(1,1,1),
+             verbose = FALSE, B = 1)

Number of observations: 100 
Monte Carlo simulations: 1 

Estimated parameter values:
   theta1     theta2     theta3 
1.905e+00  4.919e+00  1.154e+00 

Observed statistics:
Stat      Value  Pr(>Value)  MCSE 
  KS  4.616e-01  >0.000e+00    NA 
 CvM  3.642e-02  >0.000e+00    NA 
---
`MCSE' is the Monte Carlo standard error of the estimated p-value.

> 
> # All of the following should result in errors.
> tryCatch(distfreereg(Y = Y, X = X, test_mean = func, covariance = list(Sigma = Sig), theta_init = c(1,1,1),
+                      verbose = FALSE, B = 0),
+          error = function(e) warning("There was an error: ", e))
Warning message:
In value[[3L]](cond) :
  There was an error: Error in validate_numeric(x = B, pos_int = TRUE, len = 1): as.integer(B) must be positive

> tryCatch(distfreereg(Y = Y, X = X, test_mean = func, covariance = list(Sigma = Sig), theta_init = c(1,1,1),
+                      verbose = FALSE, B = 0.7),
+          error = function(e) warning("There was an error: ", e))
Warning message:
In value[[3L]](cond) :
  There was an error: Error in validate_numeric(x = B, pos_int = TRUE, len = 1): as.integer(B) must be positive

> tryCatch(distfreereg(Y = Y, X = X, test_mean = func, covariance = list(Sigma = Sig), theta_init = c(1,1,1),
+                      verbose = FALSE, B = -1),
+          error = function(e) warning("There was an error: ", e))
Warning message:
In value[[3L]](cond) :
  There was an error: Error in validate_numeric(x = B, pos_int = TRUE, len = 1): as.integer(B) must be positive

> tryCatch(distfreereg(Y = Y, X = X, test_mean = func, covariance = list(Sigma = Sig), theta_init = c(1,1,1),
+                      verbose = FALSE, B = 1i),
+          error = function(e) warning("There was an error: ", e))
Warning message:
In value[[3L]](cond) :
  There was an error: Error in validate_numeric(x = B, pos_int = TRUE, len = 1): B must be numeric; supplied value has class "complex"

> tryCatch(distfreereg(Y = Y, X = X, test_mean = func, covariance = list(Sigma = Sig), theta_init = c(1,1,1),
+                      verbose = FALSE, B = "hi"),
+          error = function(e) warning("There was an error: ", e))
Warning message:
In value[[3L]](cond) :
  There was an error: Error in validate_numeric(x = B, pos_int = TRUE, len = 1): B must be numeric; supplied value has class "character"

> 
> proc.time()
   user  system elapsed 
   0.43    0.04    0.46 

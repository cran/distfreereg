
R version 4.4.2 (2024-10-31 ucrt) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(distfreereg)
> set.seed(20240303)
> n <- 1e1
> 
> df <- data.frame(
+   a = rnorm(n),
+   b = sample(1:3, size = n, replace = TRUE)
+ )
> 
> Sig <- 7
> df$c <- 5*df[["a"]] + df[["b"]] + rnorm(n, sd = sqrt(Sig))
> df$b <- factor(LETTERS[df[["b"]]])
> test_mean_formula <- c ~ a + b
> 
> set.seed(20240303)
> dfr_1 <- distfreereg(test_mean = test_mean_formula, data = df,
+                      covariance = list(Sigma = Sig), verbose = FALSE)
> dfr_1

Number of observations: 10 
Monte Carlo simulations: 10000 

Estimated parameter values:
(Intercept)          a          bB         bC 
  1.342e+00  4.315e+00  -1.155e+00  1.161e+00 

Observed statistics:
Stat      Value  Pr(>Value)       MCSE 
  KS  5.025e-01   5.016e-01  5.000e-03 
 CvM  7.158e-02   4.801e-01  4.996e-03 
---
`MCSE' is the Monte Carlo standard error of the estimated p-value.

> 
> # Note: using sum() leads to slightly difference results from an explicit sum of
> # the form theta[1]*X[1] + theta[2]*X[2] + theta[3]*X[3] + theta[4]*X[4].
> test_mean_function <- function(x, theta) sum(x*theta)
> 
> X <- cbind(`(Intercept)` = 1,# avoid warning about single value in a column
+            df$a,
+            ifelse(df[["b"]] == "B", 1, 0),
+            ifelse(df[["b"]] == "C", 1, 0))
> Y <- df[["c"]]
> 
> set.seed(20240303)
> dfr_2 <- distfreereg(test_mean = test_mean_function, X = X, Y = Y, covariance = list(Sigma = Sig),
+                      theta_init = rep(1,4), verbose = FALSE)
> 
> message('all.equal(dfr_1[["epsp"]], dfr_2[["epsp"]], check.attributes = FALSE, tolerance = 1e-5) (should be TRUE): ', all.equal(dfr_1[["epsp"]], dfr_2[["epsp"]], check.attributes = FALSE, tolerance = 1e-5))
all.equal(dfr_1[["epsp"]], dfr_2[["epsp"]], check.attributes = FALSE, tolerance = 1e-5) (should be TRUE): TRUE
> message('identical(dfr_1[["mcsim_stats"]], dfr_2[["mcsim_stats"]]) (should be TRUE): ', identical(dfr_1[["mcsim_stats"]], dfr_2[["mcsim_stats"]]))
identical(dfr_1[["mcsim_stats"]], dfr_2[["mcsim_stats"]]) (should be TRUE): TRUE
> 
> proc.time()
   user  system elapsed 
   0.73    0.06    0.79 

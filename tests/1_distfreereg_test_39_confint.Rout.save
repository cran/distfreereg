
R version 4.4.2 (2024-10-31 ucrt) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(distfreereg)
> 
> # First, test a linear model.
> set.seed(20240816)
> n <- 1e2
> func <- function(x, theta) theta[1] + theta[2]*x[1] + theta[3]*x[2]
> Sig <- rexp(n) + 1
> theta <- c(2,5,-1)
> X <- matrix(rexp(2*n, rate = 1), nrow = n)
> Y <- distfreereg:::f2ftheta(f = func, X)(theta) + rnorm(n, sd = sqrt(Sig))
> 
> set.seed(20240816)
> dfr_1 <- distfreereg(Y = Y, X = X, test_mean = func, covariance = list(Sigma = Sig),
+                      theta_init = rep(1, length(theta)), verbose = FALSE)
> 
> confint_1 <- confint(dfr_1)
> signif(confint_1[["ci"]], digits = 4)
        2.5 %  97.5 %
theta1  1.448  2.5240
theta2  4.668  5.2800
theta3 -1.321 -0.7234
> 
> # Now compare to results from lm().
> df <- data.frame(a = X[,1], b = X[,2], c = Y)
> m <- lm(c ~ a + b, data = df, weights = dfr_1[["covariance"]][["P"]])
> dfr_2 <- distfreereg(test_mean = m, verbose = FALSE)
> all.equal(dfr_1[["theta_hat"]], dfr_2[["theta_hat"]], check.attributes = FALSE, tolerance = 1e-4)
[1] TRUE
> 
> confint_2 <- confint(dfr_2)
> signif(confint_2, digits = 4)
             2.5 %  97.5 %
(Intercept)  1.466  2.5060
a            4.618  5.3310
b           -1.348 -0.6959
> 
> all.equal(confint_1[["ci"]], confint_2, check.attributes = FALSE, tolerance = 1e-4)
[1] "Mean relative difference: 0.01204974"
> 
> 
> # Compare to results from using a matrix form for Sigma
> set.seed(20240816)
> dfr_3 <- distfreereg(Y = Y, X = X, test_mean = func, covariance = list(Sigma = diag(Sig)),
+                      theta_init = rep(1, length(theta)), verbose = FALSE)
> confint_3 <- confint(dfr_3)
> all.equal(confint_1, confint_3, tolerance = 1e-4)
[1] TRUE
> 
> 
> 
> # Next, try a non-linear model
> set.seed(20240816)
> n <- 1e2
> func <- function(x, theta) theta[1] + x[1]^theta[2] + theta[3]*x[2]
> Sig <- rexp(n) + 1
> theta <- c(5,1,-1)
> X <- matrix(rexp(2*n, rate = 1), nrow = n)
> Y <- distfreereg:::f2ftheta(f = func, X)(theta) + rnorm(n, sd = sqrt(Sig))
> 
> set.seed(20240816)
> dfr_4 <- distfreereg(Y = Y, X = X, test_mean = func, covariance = list(Sigma = Sig),
+                      theta_init = rep(1, length(theta)), verbose = FALSE)
> 
> confint_4 <- confint(dfr_4)
> signif(confint_4[["ci"]], digits = 4)
         2.5 %  97.5 %
theta1  4.5260  5.3630
theta2  0.8635  1.2710
theta3 -1.3080 -0.7161
> 
> # Next, compare to results from nls().
> df <- data.frame(x1 = X[,1], x2 = X[,2], y = Y)
> m <- nls(y ~ k + x1^a + b*x2, data = df, weights = dfr_1[["covariance"]][["P"]])
Warning message:
In nls(y ~ k + x1^a + b * x2, data = df, weights = dfr_1[["covariance"]][["P"]]) :
  No starting values specified for some parameters.
Initializing 'k', 'a', 'b' to '1.'.
Consider specifying 'start' or using a selfStart model
> 
> dfr_5 <- distfreereg(test_mean = m, verbose = FALSE)
> all.equal(dfr_4[["theta_hat"]], dfr_5[["theta_hat"]], check.attributes = FALSE, tolerance = 1e-4)
[1] TRUE
> 
> confint_5 <- confint(dfr_5)
> signif(confint_5, digits = 4)
    2.5 %  97.5 %
k  4.5410  5.3480
a  0.7889  1.3460
b -1.3360 -0.6884
> 
> all.equal(confint_4[["ci"]], confint_5, check.attributes = FALSE, tolerance = 1e-4)
[1] "Mean relative difference: 0.01667503"
> 
> # Compare to results from using a matrix form for Sigma
> set.seed(20240816)
> dfr_6 <- distfreereg(Y = Y, X = X, test_mean = func, covariance = list(Sigma = diag(Sig)),
+                      theta_init = rep(1, length(theta)), verbose = FALSE)
> confint_6 <- confint(dfr_6)
> all.equal(confint_4, confint_6, tolerance = 1e-4)
[1] TRUE
> 
> proc.time()
   user  system elapsed 
  13.03    0.17   13.28 

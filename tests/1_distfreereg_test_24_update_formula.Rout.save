
R version 4.4.1 (2024-06-14 ucrt) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(distfreereg)
> set.seed(20240319)
> n <- 1e2
> func <- function(x, theta) theta[1] + theta[2]*x
> Sig <- diag(rexp(n))
> theta <- c(2,5)
> X <- matrix(rexp(n, rate = 1))
> Y <- distfreereg:::f2ftheta(f = func, X)(theta) +
+   as.vector(distfreereg:::rmvnorm(n = n, reps = 1, mean = rep(0,n), SqrtSigma = distfreereg:::matsqrt(Sig)))
> data <- data.frame(a = X, b = Y)
> form <- b ~ a
> 
> # Basic tests.
> dfr_01a <- distfreereg(data = data, test_mean = form, covariance = list(Sigma = Sig), verbose = FALSE)
> tryCatch(update(dfr_01a, theta_init = c(3,3)), error = function(e) warning(e))
Warning message:
In distfreereg.formula(theta_init = c(3, 3), test_mean = form, verbose = FALSE,  :
  theta_init must be NULL when method is 'lm'
> tryCatch(update(dfr_01a, override = list(theta_hat = dfr_01a[["theta_hat"]])),
+          error = function(e) warning(e))
Warning message:
In validate_args_distfreereg_formula(test_mean = test_mean, data = data,  :
  distfreereg.formula() argument 'override' cannot have 'theta_hat' element
> 
> # Tests for res_order
> dfr_04a <- distfreereg(data = data, test_mean = form, covariance = list(Sigma = Sig),
+                        verbose = FALSE, ordering = "optimal")
> dfr_04b <- update(dfr_01a, ordering = "optimal")
> identical(dfr_01a[["res_order"]], dfr_04a[["res_order"]])# FALSE
[1] FALSE
> identical(dfr_04a[["res_order"]], dfr_04b[["res_order"]])# TRUE
[1] TRUE
> identical(dfr_04a[["r"]], dfr_04b[["r"]])# TRUE
[1] TRUE
> 
> dfr_04c <- distfreereg(data = data, test_mean = form, covariance = list(Sigma = Sig),
+                        verbose = FALSE, override = list(res_order = dfr_04a[["res_order"]]))
> identical(dfr_04a[["r"]], dfr_04c[["r"]])# TRUE
[1] TRUE
> 
> dfr_05a <- distfreereg(data = data, test_mean = form, covariance = list(Sigma = Sig),
+                        verbose = FALSE, ordering = "asis")
> dfr_05b <- update(dfr_04c, ordering = "asis")# presence of "asis" should clear override from dfr_04c
> identical(dfr_05a[["r"]], dfr_05b[["r"]])# TRUE
[1] TRUE
> 
> # Tests for clearing only one entry from override
> dfr_06a <- distfreereg(data = data, test_mean = form, covariance = list(Sigma = Sig),
+                        verbose = FALSE, override = list(mcsim_stats = dfr_04a[["mcsim_stats"]],
+                                                         res_order = dfr_04a[["res_order"]]))
> dfr_06b <- update(dfr_06a, ordering = "asis")
> identical(dfr_06a[["mcsim_stats"]], dfr_06b[["mcsim_stats"]])# FALSE
[1] FALSE
> identical(dfr_06a[["res_order"]], dfr_04a[["res_order"]])# TRUE
[1] TRUE
> identical(dfr_06a[["res_order"]], dfr_06b[["res_order"]])# FALSE
[1] FALSE
> 
> proc.time()
   user  system elapsed 
   3.84    0.21    4.06 


R version 4.4.2 (2024-10-31 ucrt) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(distfreereg)
> set.seed(20240227)
> 
> n <- 20
> func <- function(x, theta) theta[1] + theta[2]*x
> Sig <- rWishart(1, df = n, Sigma = diag(n))[,,1]
> theta <- c(2,5)
> X <- matrix(rexp(n, rate = 1))
> 
> set.seed(20240227)
> cdfr_1 <- compare(reps = 10, prog = Inf, theta = theta, true_mean = func, true_X = X,
+                   X = X, test_mean = func,
+                   true_covariance = list(Sigma = Sig),
+                   covariance = list(Sigma = Sig),
+                   theta_init = rep(1, length(theta)))
Calculating required true covariance specification matrices...
Generating errors...
Running simulation...
> 
> set.seed(20240227)
> cdfr_2 <- compare(reps = 10, prog = Inf, theta = theta, true_mean = func, true_X = X,
+                   X = X, test_mean = func,
+                   true_covariance = list(Sigma = Sig),
+                   covariance = list(Sigma = Sig),
+                   theta_init = rep(1, length(theta)), control = list(symmetric = FALSE))
Calculating required true covariance specification matrices...
Generating errors...
Running simulation...
> 
> message('identical(cdfr_1$observed_stats, cdfr_2$observed_stats) (should be TRUE): ', identical(cdfr_1$observed_stats, cdfr_2$observed_stats))
identical(cdfr_1$observed_stats, cdfr_2$observed_stats) (should be TRUE): TRUE
> 
> tryCatch(compare(reps = 10, prog = Inf, theta = theta, true_mean = func, true_X = X,
+                  X = X, test_mean = func,
+                  true_covariance = list(Sigma = Sig),
+                  covariance = list(Sigma = Sig),
+                  theta_init = rep(1, length(theta)), control = list(symmetric = TRUE)),
+          error = function(e) warning(e))
Warning message:
In validate_args_compare(true_mean = true_mean, true_method = true_method,  :
  control element "symmetric" must be NULL, FALSE, or a named list
> 
> tryCatch(compare(reps = 10, prog = Inf, theta = theta, true_mean = func, true_X = X,
+                  X = X, test_mean = func,
+                  true_covariance = list(P = solve(Sig)),
+                  covariance = list(Sigma = Sig),
+                  theta_init = rep(1, length(theta)),
+                  control = list(symmetric = list(tol = 1e-200))),
+          error = function(e) warning(e))
Warning message:
In validate_sqmat(covariance_list[[x]], n, symmetric, message = c("Error in validating ",  :
  Error in validating true_covariance element P (length>1): covariance_list[[x]] is not symmetric
> 
> proc.time()
   user  system elapsed 
   0.98    0.09    1.06 

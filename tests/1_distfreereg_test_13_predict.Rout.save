
R version 4.4.2 (2024-10-31 ucrt) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(distfreereg)
> set.seed(20240206)
> n <- 1e2
> func_1 <- function(x, theta) theta[1] + theta[2]*x[1] + theta[3]*x[2]
> func_2 <- function(theta) theta
> Sig <- diag(rexp(n))
> w <- 1/diag(Sig)
> theta_1 <- c(2,5,1)
> theta_2 <- 7
> X_1 <- matrix(rexp(2*n, rate = 1), nrow = n)
> Y_1 <- distfreereg:::f2ftheta(f = func_1, X = X_1)(theta_1) +
+   as.vector(distfreereg:::rmvnorm(n = n, reps = 1, mean = rep(0,n), SqrtSigma = distfreereg:::matsqrt(Sig)))
> Y_2 <- distfreereg:::f2ftheta(f = func_2, X = NULL, n = n)(theta_2) +
+   as.vector(distfreereg:::rmvnorm(n = n, reps = 1, mean = rep(0,n), SqrtSigma = distfreereg:::matsqrt(Sig)))
> dfr_1 <- distfreereg(Y = Y_1, X = X_1, test_mean = func_1,
+                      covariance = list(Sigma = Sig), theta_init = c(1,1,1),
+                      verbose = FALSE)
> dfr_2 <- distfreereg(Y = Y_2, test_mean = func_2,
+                      covariance = list(Sigma = Sig), theta_init = 1,
+                      verbose = FALSE)
> 
> predict(dfr_1)
  [1] 16.135375  8.886725  3.819728  9.149500  4.007445  6.973365  5.063502
  [8] 12.254725  8.922457  3.314197 16.065835  2.860634  2.985032  2.594414
 [15] 15.207298  8.440682  6.604720  4.473342  3.758818  9.307051  8.831744
 [22]  2.649313  5.124832 10.871424  7.407300 14.918453  9.050586  5.366636
 [29]  4.469842  3.138175  9.507086 11.607012  6.622399  7.360434  7.309752
 [36]  3.773729  6.706090  5.261778  7.302768 12.090452 10.175200  2.706712
 [43]  6.852159  3.997913  7.349080  7.847593  2.996402 12.719128  5.652621
 [50]  4.754055 12.615315 10.007149 16.318428  7.788632  8.042019  4.483647
 [57]  8.274778  4.248440  7.603357 15.882465  9.206824  8.483570  2.742576
 [64]  5.008426  4.169070  3.877225  9.771161  3.620976 27.166104  8.750227
 [71]  3.508528 20.055800  7.242393  7.952797  5.706021 12.227506 16.595011
 [78]  8.634300 16.766447 11.130562  3.845837  3.719909 10.386344 11.836346
 [85]  4.049303  5.517441  8.555202  8.628183  4.899042  3.726764  6.317093
 [92]  7.747175  5.917560  6.735353 10.073949  7.063834  2.883674  4.793570
 [99]  3.554639 12.045968
> predict(dfr_2)
  [1] 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287
  [9] 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287
 [17] 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287
 [25] 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287
 [33] 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287
 [41] 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287
 [49] 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287
 [57] 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287
 [65] 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287
 [73] 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287
 [81] 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287
 [89] 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287 7.020287
 [97] 7.020287 7.020287 7.020287 7.020287
> predict(dfr_2, newdata = 4)
[1] 7.020287
Warning message:
In predict.distfreereg(dfr_2, newdata = 4) :
  Vector supplied as 'newdata' converted into single row of newdata matrix...
> predict(dfr_2, newdata = c(4,5))
[1] 7.020287 7.020287
Warning message:
In predict.distfreereg(dfr_2, newdata = c(4, 5)) :
  Vector supplied as 'newdata' converted into single row of newdata matrix...
> 
> df <- as.data.frame(cbind(X_1, Y_1))
> colnames(df) <- c("a", "b", "c")
> test_form <- c ~ a + b
> dfr_3 <- distfreereg(test_mean = test_form, data = df,
+                      covariance = list(Sigma = Sig),
+                      verbose = FALSE)
> message('all.equal(dfr_1$theta_hat, dfr_3$theta_hat, check.attributes = FALSE) (should be TRUE): ', all.equal(dfr_1$theta_hat, dfr_3$theta_hat, check.attributes = FALSE))
all.equal(dfr_1$theta_hat, dfr_3$theta_hat, check.attributes = FALSE) (should be TRUE): TRUE
> 
> n_new <- 10
> X_new <- matrix(rnorm(2*n_new), ncol = 2)
> df_new <- as.data.frame(X_new)
> colnames(df_new) <- c("a", "b")
> 
> predict(dfr_3)
        1         2         3         4         5         6         7         8 
16.135375  8.886725  3.819728  9.149500  4.007445  6.973365  5.063502 12.254725 
        9        10        11        12        13        14        15        16 
 8.922457  3.314197 16.065835  2.860634  2.985032  2.594414 15.207298  8.440682 
       17        18        19        20        21        22        23        24 
 6.604720  4.473342  3.758818  9.307051  8.831744  2.649313  5.124832 10.871424 
       25        26        27        28        29        30        31        32 
 7.407300 14.918453  9.050586  5.366636  4.469842  3.138175  9.507086 11.607012 
       33        34        35        36        37        38        39        40 
 6.622399  7.360434  7.309752  3.773729  6.706090  5.261778  7.302768 12.090452 
       41        42        43        44        45        46        47        48 
10.175200  2.706712  6.852159  3.997913  7.349080  7.847593  2.996402 12.719128 
       49        50        51        52        53        54        55        56 
 5.652621  4.754055 12.615315 10.007149 16.318428  7.788632  8.042019  4.483647 
       57        58        59        60        61        62        63        64 
 8.274778  4.248440  7.603357 15.882465  9.206824  8.483570  2.742576  5.008426 
       65        66        67        68        69        70        71        72 
 4.169070  3.877225  9.771161  3.620976 27.166104  8.750227  3.508528 20.055800 
       73        74        75        76        77        78        79        80 
 7.242393  7.952797  5.706021 12.227506 16.595011  8.634300 16.766447 11.130562 
       81        82        83        84        85        86        87        88 
 3.845837  3.719909 10.386344 11.836346  4.049303  5.517441  8.555202  8.628183 
       89        90        91        92        93        94        95        96 
 4.899042  3.726764  6.317093  7.747175  5.917560  6.735353 10.073949  7.063834 
       97        98        99       100 
 2.883674  4.793570  3.554639 12.045968 
> predict(dfr_3, newdata = df_new)
         1          2          3          4          5          6          7 
 0.2328186  1.6727386  0.3055805  1.8316481 11.8524052  7.6028780  7.7271581 
         8          9         10 
 1.5571109 -1.8256294 -1.7960264 
> 
> all.equal(predict(dfr_3, newdata = df_new),
+           predict(dfr_1, newdata = X_new), check.attributes = FALSE)# TRUE
[1] TRUE
> 
> 
> m <- lm(test_form, data = df, weights = w)
> 
> dfr_4 <- distfreereg(test_mean = m, verbose = FALSE)
> 
> predict(dfr_4)
        1         2         3         4         5         6         7         8 
16.135375  8.886725  3.819728  9.149500  4.007445  6.973365  5.063502 12.254725 
        9        10        11        12        13        14        15        16 
 8.922457  3.314197 16.065835  2.860634  2.985032  2.594414 15.207298  8.440682 
       17        18        19        20        21        22        23        24 
 6.604720  4.473342  3.758818  9.307051  8.831744  2.649313  5.124832 10.871424 
       25        26        27        28        29        30        31        32 
 7.407300 14.918453  9.050586  5.366636  4.469842  3.138175  9.507086 11.607012 
       33        34        35        36        37        38        39        40 
 6.622399  7.360434  7.309752  3.773729  6.706090  5.261778  7.302768 12.090452 
       41        42        43        44        45        46        47        48 
10.175200  2.706712  6.852159  3.997913  7.349080  7.847593  2.996402 12.719128 
       49        50        51        52        53        54        55        56 
 5.652621  4.754055 12.615315 10.007149 16.318428  7.788632  8.042019  4.483647 
       57        58        59        60        61        62        63        64 
 8.274778  4.248440  7.603357 15.882465  9.206824  8.483570  2.742576  5.008426 
       65        66        67        68        69        70        71        72 
 4.169070  3.877225  9.771161  3.620976 27.166104  8.750227  3.508528 20.055800 
       73        74        75        76        77        78        79        80 
 7.242393  7.952797  5.706021 12.227506 16.595011  8.634300 16.766447 11.130562 
       81        82        83        84        85        86        87        88 
 3.845837  3.719909 10.386344 11.836346  4.049303  5.517441  8.555202  8.628183 
       89        90        91        92        93        94        95        96 
 4.899042  3.726764  6.317093  7.747175  5.917560  6.735353 10.073949  7.063834 
       97        98        99       100 
 2.883674  4.793570  3.554639 12.045968 
> predict(dfr_4, newdata = df_new)
         1          2          3          4          5          6          7 
 0.2328186  1.6727386  0.3055805  1.8316481 11.8524052  7.6028780  7.7271581 
         8          9         10 
 1.5571109 -1.8256294 -1.7960264 
> 
> all.equal(predict(dfr_4, newdata = df_new),
+           predict(dfr_1, newdata = X_new), check.attributes = FALSE)# TRUE
[1] TRUE
> 
> 
> 
> 
> 
> # nls
> 
> dfr_5 <- distfreereg(Y = Y_1, X = X_1, test_mean = func_1,
+                      covariance = list(Sigma = Sig), theta_init = c(1,1,1),
+                      verbose = FALSE)
> form <- c ~ f + g*a + h*b
> dfr_6 <- distfreereg(test_mean = form, data = df, method = "nls",
+                      covariance = list(Sigma = Sig), verbose = FALSE)
Warning message:
In (function (formula, data = parent.frame(), start, control = nls.control(),  :
  No starting values specified for some parameters.
Initializing 'f', 'g', 'h' to '1.'.
Consider specifying 'start' or using a selfStart model
> 
> message('all.equal(predict(dfr_5), predict(dfr_6), check.attributes = FALSE) (should be TRUE): ', all.equal(predict(dfr_5), predict(dfr_6), check.attributes = FALSE))
all.equal(predict(dfr_5), predict(dfr_6), check.attributes = FALSE) (should be TRUE): TRUE
> 
> m_nls <- nls(form, data = df, weights = w)
Warning message:
In nls(form, data = df, weights = w) :
  No starting values specified for some parameters.
Initializing 'f', 'g', 'h' to '1.'.
Consider specifying 'start' or using a selfStart model
> dfr_7 <- distfreereg(m_nls)
Using weights from nls object as covariance specification...
Retrieving Jacobian from 'nls' object...
Retrieving fitted values from 'nls' object...
Using supplied inverse square root of the covariance matrix...
Calculating mu...
Ordering observations by simplex method...
Calculating transformation anchors...
Calculating residuals...
Calculating observed statistic(s)...
Running Monte Carlo simulation...
...1000 of 10000
...2000 of 10000
...3000 of 10000
...4000 of 10000
...5000 of 10000
...6000 of 10000
...7000 of 10000
...8000 of 10000
...9000 of 10000
...10000 of 10000
> 
> message('all.equal(predict(dfr_6), predict(dfr_7), check.attributes = FALSE) (should be TRUE): ', all.equal(predict(dfr_6), predict(dfr_7), check.attributes = FALSE))
all.equal(predict(dfr_6), predict(dfr_7), check.attributes = FALSE) (should be TRUE): TRUE
> new_data <- data.frame(a = 1:2, b = 4:5)
> message('identical(predict(dfr_6, newdata = new_data), predict(dfr_7, newdata = new_data)) (should be TRUE): ', identical(predict(dfr_6, newdata = new_data), predict(dfr_7, newdata = new_data)))
identical(predict(dfr_6, newdata = new_data), predict(dfr_7, newdata = new_data)) (should be TRUE): TRUE
> 
> proc.time()
   user  system elapsed 
   2.78    0.17    2.96 


R version 4.4.1 (2024-06-14 ucrt) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(distfreereg)
> set.seed(20240308)
> n <- 5
> Sig <- rWishart(1, df = n, Sigma = diag(n))[,,1]
> theta <- c(2,5)
> true_func <- function(theta, x) theta[1]*x[1] + theta[2]*x[2]
> test_func <- function(theta, x) theta[1]*x[1] + theta[2]*x[2]^2
> true_form <- c ~ a + b - 1
> test_form <- c ~ a + I(b^2) - 1
> true_data <- data.frame(a = rexp(n, rate = 1), b = rnorm(n))
> true_X <- as.matrix(true_data)
> X <- true_X + rexp(length(true_X))
> data <- as.data.frame(X)
> true_data[["c"]] <- theta[1]*true_data[["a"]] + theta[2]*true_data[["b"]]
> data[["c"]] <- 5*data[["a"]] - 4*data[["b"]]^2
> true_m <- lm(true_form, data = true_data)
> test_m <- lm(test_form, data = data)
> 
> # Each true/test mean pair has 16 possibilities for which X/data values are
> # given. These are specified below by a four-digit binary sequence indicating
> # the presence/absence of each term in the call, in the following order:
> # true_data, data, true_X, X. For example, "0011" indicates that only
> # true_X and X are provided.
> 
> ######################################
> #### true_mean func, test_mean lm ####
> #### should work exactly for 0010 ####
> ######################################
> 
> # 0000
> set.seed(20240308)
> tryCatch(compare(true_mean = true_func,
+                  test_mean = test_m,
+                  # true_data = true_data,
+                  # data = data,
+                  # true_X = true_X,
+                  # X = X,
+                  true_covariance = list(Sigma = Sig),
+                  reps = 10, B = 10, prog = Inf, theta = theta),
+          error = function(e) warning(e))
Warning message:
In validate_args_compare(true_mean = true_mean, true_method = true_method,  :
  true_mean must have neither 'x' nor 'X' as an argument when true_X is NULL
> 
> # 1000
> set.seed(20240308)
> tryCatch(compare(true_mean = true_func,
+                  test_mean = test_m,
+                  true_data = true_data,
+                  # data = data,
+                  # true_X = true_X,
+                  # X = X,
+                  true_covariance = list(Sigma = Sig),
+                  reps = 10, B = 10, prog = Inf, theta = theta),
+          error = function(e) warning(e))
Warning message:
In validate_args_compare(true_mean = true_mean, true_method = true_method,  :
  true_data must not be supplied when true_mean is a function
> 
> # 0100
> set.seed(20240308)
> tryCatch(compare(true_mean = true_func,
+                  test_mean = test_m,
+                  # true_data = true_data,
+                  data = data,
+                  # true_X = true_X,
+                  # X = X,
+                  true_covariance = list(Sigma = Sig),
+                  reps = 10, B = 10, prog = Inf, theta = theta),
+          error = function(e) warning(e))
Warning message:
In validate_args_compare(true_mean = true_mean, true_method = true_method,  :
  data must be NULL when test_mean is an lm object
> 
> # 1100
> set.seed(20240308)
> tryCatch(compare(true_mean = true_func,
+                  test_mean = test_m,
+                  true_data = true_data,
+                  data = data,
+                  # true_X = true_X,
+                  # X = X,
+                  true_covariance = list(Sigma = Sig),
+                  reps = 10, B = 10, prog = Inf, theta = theta),
+          error = function(e) warning(e))
Warning message:
In validate_args_compare(true_mean = true_mean, true_method = true_method,  :
  true_data must not be supplied when true_mean is a function
> 
> # 0010
> set.seed(20240308)
> compare(true_mean = true_func,
+                  test_mean = test_m,
+                  # true_data = true_data,
+                  # data = data,
+                  true_X = true_X,
+                  # X = X,
+                  true_covariance = list(Sigma = Sig),
+                  reps = 10, B = 10, prog = Inf, theta = theta)
Calculating required true covariance specification matrices...
Generating errors...
Running simulation...
$call
compare(true_mean = true_func, true_covariance = list(Sigma = Sig), 
    true_X = true_X, theta = theta, reps = 10, prog = Inf, test_mean = test_m, 
    B = 10)

$Y_mean
[1] -1.979704  1.922513  4.100626 -4.029924 18.191172

$errors
           [,1]       [,2]       [,3]          [,4]        [,5]        [,6]
[1,] -2.0899178  1.8943795  0.5839754  1.3437797621 -0.76660251  1.74557174
[2,] -0.7154730  2.3998756  1.3809552 -0.0002108922 -2.17927172  0.44953297
[3,] -0.6293346  1.2501133  1.5520520 -0.0030910339 -0.02229705 -0.04188349
[4,]  3.2514651 -2.4857139 -2.1423073  0.7397915680 -0.26296412 -2.90660944
[5,]  0.1309167 -0.5281276 -2.8827666  3.3765689133 -0.02461963  0.45955854
           [,7]       [,8]        [,9]     [,10]
[1,] -0.7381060  0.6010401  0.07634127 -1.653206
[2,]  1.9805584 -0.8840437 -2.56435560 -1.465963
[3,]  0.7708421 -0.3199601 -2.52627881 -1.425120
[4,]  0.7831005  1.2711506  1.39984404  1.941252
[5,] -2.3354182  2.9568447  5.20816391 -1.942376

$theta
[1] 2 5

$true_mean
function (theta, x) 
theta[1] * x[1] + theta[2] * x[2]
<bytecode: 0x00000204884126f8>

$true_covariance
$true_covariance$Sigma
           [,1]      [,2]       [,3]      [,4]      [,5]
[1,]  1.8132969  1.626406  0.9609956 -1.613210  0.813065
[2,]  1.6264062  5.006293  2.3168103 -1.466789 -1.465086
[3,]  0.9609956  2.316810  2.8107813 -1.034857 -1.604874
[4,] -1.6132098 -1.466789 -1.0348568  2.842008  1.367119
[5,]  0.8130650 -1.465086 -1.6048741  1.367119  6.265399

$true_covariance$SqrtSigma
           [,1]       [,2]       [,3]       [,4]       [,5]
[1,]  0.9722405  0.4591637  0.2964192 -0.6469425  0.3883492
[2,]  0.4591637  2.0774414  0.5655344 -0.2683206 -0.2964351
[3,]  0.2964192  0.5655344  1.4911830 -0.1843194 -0.3814283
[4,] -0.6469425 -0.2683206 -0.1843194  1.4742719  0.3795085
[5,]  0.3883492 -0.2964351 -0.3814283  0.3795085  2.3952444


$true_X
             a          b
[1,] 1.0634813 -0.8213332
[2,] 0.1162517  0.3380018
[3,] 0.6665723  0.5534962
[4,] 0.5565354 -1.0285989
[5,] 2.1869124  2.7634695

$true_data
NULL

$test_mean

Call:
lm(formula = test_form, data = data)

Coefficients:
     a  I(b^2)  
     5      -4  


$covariance
$covariance$SqrtSigma
[1] 0.4564173

$covariance$Q
[1] 2.190977


$X
NULL

$data
NULL

$observed_stats
          KS        CvM
1  0.3363209 0.04459388
2  0.3731944 0.05303113
3  0.4155404 0.05563330
4  0.3490676 0.04992412
5  0.3805592 0.04660896
6  0.2579017 0.04799466
7  0.4588271 0.07199006
8  0.4036434 0.05566453
9  0.4499140 0.08258403
10 0.4089054 0.05948349

$mcsim_stats
$mcsim_stats$KS
 [1] 0.3308754 0.8432617 0.6857725 0.6312722 0.2808266 0.7190837 0.3941524
 [8] 0.4113979 0.7023769 1.3117524

$mcsim_stats$CvM
 [1] 0.02698261 0.21320917 0.17131137 0.18490897 0.03646425 0.10981207
 [7] 0.06197242 0.06831464 0.20629097 0.72697274


$p
    KS CvM
1  0.8 0.8
2  0.8 0.8
3  0.6 0.8
4  0.8 0.8
5  0.8 0.8
6  1.0 0.8
7  0.6 0.6
8  0.7 0.8
9  0.6 0.6
10 0.7 0.8

attr(,"class")
[1] "compare"
> 
> # 1010
> set.seed(20240308)
> tryCatch(compare(true_mean = true_func,
+                  test_mean = test_m,
+                  true_data = true_data,
+                  # data = data,
+                  true_X = true_X,
+                  # X = X,
+                  true_covariance = list(Sigma = Sig),
+                  reps = 10, B = 10, prog = Inf, theta = theta),
+          error = function(e) warning(e))
Warning message:
In validate_args_compare(true_mean = true_mean, true_method = true_method,  :
  true_data must not be supplied when true_mean is a function
> 
> # 0110
> set.seed(20240308)
> tryCatch(compare(true_mean = true_func,
+                  test_mean = test_m,
+                  # true_data = true_data,
+                  data = data,
+                  true_X = true_X,
+                  # X = X,
+                  true_covariance = list(Sigma = Sig),
+                  reps = 10, B = 10, prog = Inf, theta = theta),
+          error = function(e) warning(e))
Warning message:
In validate_args_compare(true_mean = true_mean, true_method = true_method,  :
  data must be NULL when test_mean is an lm object
> 
> # 1110
> set.seed(20240308)
> tryCatch(compare(true_mean = true_func,
+                  test_mean = test_m,
+                  true_data = true_data,
+                  data = data,
+                  true_X = true_X,
+                  # X = X,
+                  true_covariance = list(Sigma = Sig),
+                  reps = 10, B = 10, prog = Inf, theta = theta),
+          error = function(e) warning(e))
Warning message:
In validate_args_compare(true_mean = true_mean, true_method = true_method,  :
  true_data must not be supplied when true_mean is a function
> 
> # 0001
> set.seed(20240308)
> tryCatch(compare(true_mean = true_func,
+                  test_mean = test_m,
+                  # true_data = true_data,
+                  # data = data,
+                  # true_X = true_X,
+                  X = X,
+                  true_covariance = list(Sigma = Sig),
+                  reps = 10, B = 10, prog = Inf, theta = theta),
+          error = function(e) warning(e))
Warning message:
In validate_args_compare(true_mean = true_mean, true_method = true_method,  :
  X must be NULL when test_mean has a formula method
> # 1001
> set.seed(20240308)
> tryCatch(compare(true_mean = true_func,
+                  test_mean = test_m,
+                  true_data = true_data,
+                  # data = data,
+                  # true_X = true_X,
+                  X = X,
+                  true_covariance = list(Sigma = Sig),
+                  reps = 10, B = 10, prog = Inf, theta = theta),
+          error = function(e) warning(e))
Warning message:
In validate_args_compare(true_mean = true_mean, true_method = true_method,  :
  true_data must not be supplied when true_mean is a function
> 
> # 0101
> set.seed(20240308)
> tryCatch(compare(true_mean = true_func,
+                  test_mean = test_m,
+                  # true_data = true_data,
+                  data = data,
+                  # true_X = true_X,
+                  X = X,
+                  true_covariance = list(Sigma = Sig),
+                  reps = 10, B = 10, prog = Inf, theta = theta),
+          error = function(e) warning(e))
Warning message:
In validate_args_compare(true_mean = true_mean, true_method = true_method,  :
  data must be NULL when test_mean is an lm object
> 
> # 1101
> set.seed(20240308)
> tryCatch(compare(true_mean = true_func,
+                  test_mean = test_m,
+                  true_data = true_data,
+                  data = data,
+                  # true_X = true_X,
+                  X = X,
+                  true_covariance = list(Sigma = Sig),
+                  reps = 10, B = 10, prog = Inf, theta = theta),
+          error = function(e) warning(e))
Warning message:
In validate_args_compare(true_mean = true_mean, true_method = true_method,  :
  true_data must not be supplied when true_mean is a function
> 
> # 0011
> set.seed(20240308)
> tryCatch(compare(true_mean = true_func,
+                  test_mean = test_m,
+                  # true_data = true_data,
+                  # data = data,
+                  true_X = true_X,
+                  X = X,
+                  true_covariance = list(Sigma = Sig),
+                  reps = 10, B = 10, prog = Inf, theta = theta),
+          error = function(e) warning(e))
Warning message:
In validate_args_compare(true_mean = true_mean, true_method = true_method,  :
  X must be NULL when test_mean has a formula method
> 
> # 1011
> set.seed(20240308)
> tryCatch(compare(true_mean = true_func,
+                  test_mean = test_m,
+                  true_data = true_data,
+                  # data = data,
+                  true_X = true_X,
+                  X = X,
+                  true_covariance = list(Sigma = Sig),
+                  reps = 10, B = 10, prog = Inf, theta = theta),
+          error = function(e) warning(e))
Warning message:
In validate_args_compare(true_mean = true_mean, true_method = true_method,  :
  true_data must not be supplied when true_mean is a function
> 
> # 0111
> set.seed(20240308)
> tryCatch(compare(true_mean = true_func,
+                  test_mean = test_m,
+                  # true_data = true_data,
+                  data = data,
+                  true_X = true_X,
+                  X = X,
+                  true_covariance = list(Sigma = Sig),
+                  reps = 10, B = 10, prog = Inf, theta = theta),
+          error = function(e) warning(e))
Warning message:
In validate_args_compare(true_mean = true_mean, true_method = true_method,  :
  data must be NULL when test_mean is an lm object
> 
> # 1111
> set.seed(20240308)
> tryCatch(compare(true_mean = true_func,
+                  test_mean = test_m,
+                  true_data = true_data,
+                  data = data,
+                  true_X = true_X,
+                  X = X,
+                  true_covariance = list(Sigma = Sig),
+                  reps = 10, B = 10, prog = Inf, theta = theta),
+          error = function(e) warning(e))
Warning message:
In validate_args_compare(true_mean = true_mean, true_method = true_method,  :
  true_data must not be supplied when true_mean is a function
> 
> proc.time()
   user  system elapsed 
   0.32    0.12    0.42 


R version 4.4.2 (2024-10-31 ucrt) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(distfreereg)
> set.seed(20240418)
> 
> n <- 1e2
> test_func <- function(x, theta) x[1]^theta[1] + x[2]^theta[2]
> test_form <- c ~ a^f + b^g
> theta <- c(5,2)
> Sig <- diag(rexp(n, rate = 1/10))
> df <- data.frame(a = rexp(n), b = rexp(n))
> df$c <- df$a^theta[1] + df$b^theta[2] + rnorm(n)
> 
> set.seed(20240418)
> dfr_0 <- distfreereg(test_mean = test_func, theta_init = c(1,1), Y = df$c, 
+                      X = as.matrix(df[,c("a", "b")]), covariance = list(Sigma = Sig))
Calculating the inverse square root of the covariance matrix...
Estimating parameters...
Calculating fitted values...
Calculating Jacobian...
Using supplied inverse square root of the covariance matrix...
Calculating mu...
Ordering observations by simplex method...
Calculating transformation anchors...
Calculating residuals...
Calculating observed statistic(s)...
Running Monte Carlo simulation...
...1000 of 10000
...2000 of 10000
...3000 of 10000
...4000 of 10000
...5000 of 10000
...6000 of 10000
...7000 of 10000
...8000 of 10000
...9000 of 10000
...10000 of 10000
> 
> dfr_1 <- distfreereg(test_mean = test_form, data = df, covariance = list(Sigma = Sig),
+                      method = "nls")
Converting covariance specification to weights...
Using weights from nls object as covariance specification...
Retrieving Jacobian from 'nls' object...
Retrieving fitted values from 'nls' object...
Using supplied inverse square root of the covariance matrix...
Calculating mu...
Ordering observations by simplex method...
Calculating transformation anchors...
Calculating residuals...
Calculating observed statistic(s)...
Running Monte Carlo simulation...
...1000 of 10000
...2000 of 10000
...3000 of 10000
...4000 of 10000
...5000 of 10000
...6000 of 10000
...7000 of 10000
...8000 of 10000
...9000 of 10000
...10000 of 10000
Warning message:
In (function (formula, data = parent.frame(), start, control = nls.control(),  :
  No starting values specified for some parameters.
Initializing 'f', 'g' to '1.'.
Consider specifying 'start' or using a selfStart model
> 
> message('identical(dfr_0[["data"]][["Y"]], dfr_1[["data"]][["Y"]]) (should be TRUE): ', identical(dfr_0[["data"]][["Y"]], dfr_1[["data"]][["Y"]]))
identical(dfr_0[["data"]][["Y"]], dfr_1[["data"]][["Y"]]) (should be TRUE): TRUE
> message('identical(dfr_0[["data"]][["X"]], dfr_1[["data"]][["X"]]) (should be TRUE): ', identical(dfr_0[["data"]][["X"]], dfr_1[["data"]][["X"]]))
identical(dfr_0[["data"]][["X"]], dfr_1[["data"]][["X"]]) (should be TRUE): TRUE
> 
> all.equal(dfr_0[["J"]], dfr_1[["J"]], check.attributes = FALSE, tolerance = 1e-5)
[1] TRUE
> all.equal(dfr_0[["fitted_values"]], dfr_1[["fitted_values"]], check.attributes = FALSE, tolerance = 1e-5)
[1] TRUE
> all.equal(dfr_0[["theta_hat"]], dfr_1[["theta_hat"]], check.attributes = FALSE, tolerance = 1e-5)
[1] TRUE
> all.equal(dfr_0[["observed_stats"]], dfr_1[["observed_stats"]], check.attributes = FALSE, tolerance = 1e-3)
[1] TRUE
> 
> proc.time()
   user  system elapsed 
   1.07    0.06    1.12 

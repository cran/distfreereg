
R version 4.4.2 (2024-10-31 ucrt) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(distfreereg)
> set.seed(20240305)
> n <- 20
> Sig <- diag(rexp(n))
> theta <- c(2,5)
> form <- c ~ a + b - 1
> data <- data.frame(a = rexp(n, rate = 1),
+                    b = rnorm(n))
> data$c <- 4*data$a - 3*data$b
> m <- lm(c ~ a + b - 1, data = data, weights = 1/diag(Sig))
> 
> # true formula, test formula
> set.seed(20240305)
> cdfr_1 <- compare(reps = 10, prog = Inf, theta = theta, true_mean = form,
+                   true_method = "lm",
+                   data = data,
+                   true_data = data, test_mean = form,
+                   true_covariance = list(Sigma = Sig),
+                   covariance = list(Sigma = Sig))
Calculating required true covariance specification matrices...
Generating errors...
Running simulation...
> 
> # true lm, test formula
> set.seed(20240305)
> cdfr_2 <- compare(reps = 10, prog = Inf, theta = theta, true_mean = m,
+                   data = data,
+                   test_mean = form,
+                   true_covariance = list(Sigma = Sig),
+                   covariance = list(Sigma = Sig))
Calculating required true covariance specification matrices...
Generating errors...
Running simulation...
> 
> # true formula, test lm
> set.seed(20240305)
> cdfr_3 <- compare(reps = 10, prog = Inf, theta = theta, true_mean = form,
+                   true_method = "lm",
+                   true_data = data, test_mean = m,
+                   true_covariance = list(Sigma = Sig))
Calculating required true covariance specification matrices...
Generating errors...
Running simulation...
> 
> # true lm, test lm
> set.seed(20240305)
> cdfr_4 <- compare(reps = 10, prog = Inf, theta = theta, true_mean = m,
+                   test_mean = m,
+                   true_covariance = list(Sigma = Sig))
Calculating required true covariance specification matrices...
Generating errors...
Running simulation...
> 
> message('identical(cdfr_1[["observed_stats"]], cdfr_2[["observed_stats"]]) (should be TRUE): ', identical(cdfr_1[["observed_stats"]], cdfr_2[["observed_stats"]]))
identical(cdfr_1[["observed_stats"]], cdfr_2[["observed_stats"]]) (should be TRUE): TRUE
> message('identical(cdfr_1[["observed_stats"]], cdfr_3[["observed_stats"]]) (should be TRUE): ', identical(cdfr_1[["observed_stats"]], cdfr_3[["observed_stats"]]))
identical(cdfr_1[["observed_stats"]], cdfr_3[["observed_stats"]]) (should be TRUE): TRUE
> message('identical(cdfr_1[["observed_stats"]], cdfr_4[["observed_stats"]]) (should be TRUE): ', identical(cdfr_1[["observed_stats"]], cdfr_4[["observed_stats"]]))
identical(cdfr_1[["observed_stats"]], cdfr_4[["observed_stats"]]) (should be TRUE): TRUE
> message('identical(cdfr_1[["mcsim_stats"]], cdfr_2[["mcsim_stats"]]) (should be TRUE): ', identical(cdfr_1[["mcsim_stats"]], cdfr_2[["mcsim_stats"]]))
identical(cdfr_1[["mcsim_stats"]], cdfr_2[["mcsim_stats"]]) (should be TRUE): TRUE
> message('identical(cdfr_1[["mcsim_stats"]], cdfr_3[["mcsim_stats"]]) (should be TRUE): ', identical(cdfr_1[["mcsim_stats"]], cdfr_3[["mcsim_stats"]]))
identical(cdfr_1[["mcsim_stats"]], cdfr_3[["mcsim_stats"]]) (should be TRUE): TRUE
> message('identical(cdfr_1[["mcsim_stats"]], cdfr_4[["mcsim_stats"]]) (should be TRUE): ', identical(cdfr_1[["mcsim_stats"]], cdfr_4[["mcsim_stats"]]))
identical(cdfr_1[["mcsim_stats"]], cdfr_4[["mcsim_stats"]]) (should be TRUE): TRUE
> 
> proc.time()
   user  system elapsed 
   1.42    0.15    1.56 
